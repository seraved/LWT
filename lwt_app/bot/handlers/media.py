
from telegram.ext import ContextTypes
from telegram import InlineKeyboardButton, Update

from bot.states import States
from bot.keyboards import media, base
from bot.keyboards import constants as kb_val
from services.media import MediaService
from entities.media import NewMediaDTO
from utils import getters as getter
from utils.logs import logger
from entities.media import MediaType

MEDIA_TYPE_KEY_MAP = {
    kb_val.KEY_MOVIE: MediaType.MOVIE,
    kb_val.KEY_SERIES: MediaType.SERIES,
    kb_val.KEY_ANIME: MediaType.ANIME,
}


async def adding_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ–æ–±—â–µ–Ω–∏–µ-–≤–µ—Ç–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ -> –í—ã–±–æ—Ä —Ç–∏–ø–∞"""
    if update.message is None:
        return States.MAIN_MENU
    if context.user_data is None:
        return States.MAIN_MENU

    context.user_data["add_media_type"] = None
    await update.message.reply_text(
        text="–ß—Ç–æ —Ö–æ—Ç–∏–º –¥–æ–±–∞–≤–∏—Ç—å?",
        reply_markup=media.choosing_media_type(for_add=True),
    )
    return States.ADDING_CHOOSE_MEDIA_TYPE


async def get_adding_media_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ -> –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    if update.callback_query is None:
        return States.MAIN_MENU
    if context.user_data is None:
        return States.MAIN_MENU

    query_data = update.callback_query.data or "_EMPTY_"
    media_type = MEDIA_TYPE_KEY_MAP.get(query_data, None)
    if media_type is None:
        logger.error(f"Unknown media type: {query_data}")
        return States.MAIN_MENU

    context.user_data["add_media_type"] = media_type

    if media_type is MediaType.MOVIE:
        msg_text = "–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –¥–æ–±–∞–≤–ª—è–µ–º?"
    elif media_type is MediaType.SERIES:
        msg_text = "–ö–∞–∫–æ–π —Å–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª—è–µ–º?"
    elif media_type is MediaType.ANIME:
        msg_text = "–ö–∞–∫–æ–µ –∞–Ω–∏–º–µ –¥–æ–±–∞–≤–ª—è–µ–º?"
    else:
        msg_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞."  # Should not happen

    await update.callback_query.edit_message_text(
        msg_text,
        reply_markup=media.back_to_main_menu(),
    )
    return States.SAVE_MEDIA


async def save_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return States.MAIN_MENU
    if context.user_data is None:
        return States.MAIN_MENU
    if (title := getter.get_message_text(update.message)) is None:
        return States.MAIN_MENU

    # TODO FIX IT MOC
    user_id = 1
    await MediaService().add_media(
        media_data=NewMediaDTO(
            title=title,
            media_type=context.user_data["add_media_type"],
            user_id=user_id,
        )
    )
    if context.user_data["add_media_type"] == MediaType.MOVIE:
        msg_text = "‚úÖ –§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω!"
    elif context.user_data["add_media_type"] == MediaType.SERIES:
        msg_text = "‚úÖ –°–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω!"
    else:
        msg_text = "‚úÖ –ê–Ω–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!"

    await update.message.reply_text(
        msg_text,
        reply_markup=base.main_menu(),
    )
    return States.MAIN_MENU


async def go_back_to_add_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data is None:
        return States.MAIN_MENU
    if update.callback_query is None:
        return States.MAIN_MENU

    context.user_data["add_media_type"] = None

    await update.callback_query.edit_message_text(
        text="–ß—Ç–æ —Ö–æ—Ç–∏–º –¥–æ–±–∞–≤–∏—Ç—å?",
        reply_markup=media.choosing_media_type(for_add=True),
    )
    return States.ADDING_CHOOSE_MEDIA_TYPE


async def showing_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ–æ–±—â–µ–Ω–∏–µ-–≤–µ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ -> –§–∏–ª—å—Ç—Ä—ã"""
    if update.message is None:
        return States.MAIN_MENU
    if context.user_data is None:
        return States.MAIN_MENU

    context.user_data["show_media_type"] = None

    await update.message.reply_text(
        text="–ß—Ç–æ —Ö–æ—Ç–∏–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?",
        reply_markup=media.choosing_media_type(),
    )
    return States.SHOWING_CHOSE_MEDIA_TYPE


async def get_showing_media_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ -> ... """
    if update.callback_query is None:
        return States.MAIN_MENU
    if context.user_data is None:
        return States.MAIN_MENU

    query_data = update.callback_query.data or "EMPTY__"
    media_type = MEDIA_TYPE_KEY_MAP.get(query_data, None)

    context.user_data["show_media_type"] = media_type

    await update.callback_query.answer()
    return await show_media_list(update, context)

# –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –≤—ã–≤–æ–¥


async def page_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    page = int(update.callback_query.data.split("_")[1])
    return await show_media_list(update, context, page)


async def show_media_list(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    page: int = 1,
):
    if update.callback_query is None:
        return States.MAIN_MENU
    if context.user_data is None:
        return States.MAIN_MENU

    # user_id = update.effective_user.id
    user_id = 1
    service = MediaService()

    media_items = await service.get_user_media(
        user_id=user_id,
        media_type=context.user_data.get("show_media_type"),
        page=page
    )
    total_items = await service.get_media_count(
        user_id=user_id,
        media_type=context.user_data.get("show_media_type"),
    )
    total_pages = (total_items + 2) // 3  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö

    if not media_items:
        await update.callback_query.edit_message_text(
            "–í–∞—à —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç",
            reply_markup=media.back_to_main_menu()
            # reply_markup=mediaInlineKeyboardMarkup(
            #     [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_media")]])
        )
        return States.SHOWING_CHOSE_MEDIA_TYPE
    msg_parts = ["üé¨ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏ (—Å—Ç—Ä. {page}/{total_pages}):\n"]
    keyboard = []
    for item in media_items:
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Ç–µ–∫—Å—Ç
        msg_parts.append(item.to_msg())

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
        keyboard.append(
            InlineKeyboardButton(
                text=f"{item.title}",
                callback_data=f"edit_item__{item.id}"
            )
        )

    await update.callback_query.edit_message_text(
        '\n'.join(msg_parts),
        reply_markup=media.media_list_keyboard(page, total_pages, parent_layer=keyboard))
    return States.SHOW_MEDIA


async def go_back_to_show_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data is None:
        return States.MAIN_MENU
    if update.callback_query is None:
        return States.MAIN_MENU

    context.user_data["add_media_type"] = None

    await update.callback_query.edit_message_text(
        text="–ß—Ç–æ —Ö–æ—Ç–∏–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?",
        reply_markup=media.choosing_media_type(),
    )
    return States.SHOWING_CHOSE_MEDIA_TYPE


# async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     query = update.callback_query
#     if query is None:
#         return States.MAIN_MENU

#     await query.answer()
#     logger.debug(f"query.data: {query.data}")

#     if query.data == kb_val.KEY_ANIME_ADD:
#         await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
#         return States.START_ADD_MEDIA  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

#     if query.data == "list_media":
#         return await show_media_list(update, context, page=1)

#     if query.data == "filter_all":
#         return await show_media_list(update, context, page=1)


# async def show_media_list(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 1, watched_filter: str = None):
#     user_id = update.effective_user.id
#     context.user_data["current_page"] = page
#     context.user_data["current_filter"] = watched_filter
#     logger.debug(
#         f"user_id: {user_id}, page: {page}, watched_filter: {watched_filter}"
#     )
#     service = MediaService()

#     # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
#     media_items = await service.get_user_media(
#         user_id=user_id,
#         page=page,
#         watched_filter=watched_filter
#     )
#     total_items = await service.get_media_count(
#         user_id=user_id,
#         watched_filter=watched_filter  # TODO
#     )
#     total_pages = max(1, (total_items + 2) // 3)  # –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö

#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
#     message_text = "üé¨ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
#     if watched_filter:
#         message_text += f"–§–∏–ª—å—Ç—Ä: {'–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ' if watched_filter == 'watched' else '–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ'}\n\n"

#     for idx, item in enumerate(media_items, start=1):
#         status = "‚úÖ" if item.watched else "üü°"
#         message_text += f"{idx}. {status} {item.title}\n"

#     # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#     buttons = []

#     # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
#     for item in media_items:
#         buttons.extend(media.media_item_buttons(item.id, item.watched))

#     # –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
#     buttons.append([
#         InlineKeyboardButton(
#             text="–í—Å–µ",
#             callback_data="filter_all",
#         ),
#         InlineKeyboardButton(
#             text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ",
#             callback_data="filter_watched",
#         ),
#         InlineKeyboardButton(
#             text="–ù–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ",
#             callback_data="filter_unwatched",
#         )
#     ])

#     # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
#     if total_pages > 1:
#         nav_buttons = []
#         if page > 1:
#             nav_buttons.append(
#                 InlineKeyboardButton(
#                     text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
#         if page < total_pages:
#             nav_buttons.append(InlineKeyboardButton(
#                 "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_{page+1}"))
#         buttons.append(nav_buttons)

#     # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
#     buttons.append([InlineKeyboardButton(
#         "‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data="main_menu")])

#     keyboard = InlineKeyboardMarkup(buttons)

#     # –û—Ç–ø—Ä–∞–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
#     if update.callback_query:
#         logger.info("123")
#         await update.callback_query.edit_message_text(
#             text=message_text,
#             reply_markup=keyboard
#         )
#     else:
#         logger.info("456")
#         await update.message.reply_text(
#             text=message_text,
#             reply_markup=keyboard
#         )

#     return States.VIEWING_LIST


# async def page_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     page = int(update.callback_query.data.split("_")[1])
#     return await show_media_list(update, context, page)


# async def toggle_watch_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     media_id = int(update.callback_query.data.split("_")[2])
#     await MediaService().toggle_watched_status(media_id)

#     # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#     current_page = context.user_data.get("current_page", 1)
#     return await show_media_list(update, context, current_page)
